// Code generated by protoc-gen-go.
// source: logtail.proto
// DO NOT EDIT!

/*
Package logtail is a generated protocol buffer package.

It is generated from these files:
	logtail.proto

It has these top-level messages:
	RequestFile
	Files
	FileName
	Content
*/
package logtail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestFile struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestFile) Reset()                    { *m = RequestFile{} }
func (m *RequestFile) String() string            { return proto.CompactTextString(m) }
func (*RequestFile) ProtoMessage()               {}
func (*RequestFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Files struct {
	Name             []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Files) Reset()                    { *m = Files{} }
func (m *Files) String() string            { return proto.CompactTextString(m) }
func (*Files) ProtoMessage()               {}
func (*Files) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Files) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type FileName struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileName) Reset()                    { *m = FileName{} }
func (m *FileName) String() string            { return proto.CompactTextString(m) }
func (*FileName) ProtoMessage()               {}
func (*FileName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileName) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Content struct {
	Line             []string `protobuf:"bytes,1,rep,name=line" json:"line,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Content) GetLine() []string {
	if m != nil {
		return m.Line
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestFile)(nil), "logtail.RequestFile")
	proto.RegisterType((*Files)(nil), "logtail.Files")
	proto.RegisterType((*FileName)(nil), "logtail.FileName")
	proto.RegisterType((*Content)(nil), "logtail.Content")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LogTail service

type LogTailClient interface {
	GetFiles(ctx context.Context, in *RequestFile, opts ...grpc.CallOption) (*Files, error)
	GetFileContent(ctx context.Context, in *FileName, opts ...grpc.CallOption) (*Content, error)
}

type logTailClient struct {
	cc *grpc.ClientConn
}

func NewLogTailClient(cc *grpc.ClientConn) LogTailClient {
	return &logTailClient{cc}
}

func (c *logTailClient) GetFiles(ctx context.Context, in *RequestFile, opts ...grpc.CallOption) (*Files, error) {
	out := new(Files)
	err := grpc.Invoke(ctx, "/logtail.LogTail/GetFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logTailClient) GetFileContent(ctx context.Context, in *FileName, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := grpc.Invoke(ctx, "/logtail.LogTail/GetFileContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogTail service

type LogTailServer interface {
	GetFiles(context.Context, *RequestFile) (*Files, error)
	GetFileContent(context.Context, *FileName) (*Content, error)
}

func RegisterLogTailServer(s *grpc.Server, srv LogTailServer) {
	s.RegisterService(&_LogTail_serviceDesc, srv)
}

func _LogTail_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogTailServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logtail.LogTail/GetFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogTailServer).GetFiles(ctx, req.(*RequestFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogTail_GetFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogTailServer).GetFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logtail.LogTail/GetFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogTailServer).GetFileContent(ctx, req.(*FileName))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogTail_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logtail.LogTail",
	HandlerType: (*LogTailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFiles",
			Handler:    _LogTail_GetFiles_Handler,
		},
		{
			MethodName: "GetFileContent",
			Handler:    _LogTail_GetFileContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logtail.proto",
}

func init() { proto.RegisterFile("logtail.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xc9, 0x4f, 0x2f,
	0x49, 0xcc, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x78, 0xb9,
	0xb8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xdc, 0x32, 0x73, 0x52, 0x95, 0x44, 0xb9, 0x58,
	0x41, 0x74, 0xb1, 0x10, 0x0f, 0x17, 0x4b, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xb3, 0x06,
	0xa7, 0x92, 0x04, 0x17, 0x07, 0x48, 0xd8, 0x2f, 0x31, 0x37, 0x15, 0x49, 0x86, 0x49, 0x83, 0x53,
	0x49, 0x9c, 0x8b, 0xdd, 0x39, 0x3f, 0xaf, 0x24, 0x35, 0xaf, 0x04, 0x24, 0x91, 0x93, 0x99, 0x07,
	0xd5, 0x62, 0x54, 0xc6, 0xc5, 0xee, 0x93, 0x9f, 0x1e, 0x92, 0x98, 0x99, 0x23, 0x64, 0xc4, 0xc5,
	0xe1, 0x9e, 0x5a, 0x02, 0x31, 0x57, 0x44, 0x0f, 0xe6, 0x10, 0x24, 0x6b, 0xa5, 0xf8, 0xe0, 0xa2,
	0x60, 0x55, 0x4a, 0x0c, 0x42, 0xe6, 0x5c, 0x7c, 0x50, 0x3d, 0x30, 0xe3, 0x05, 0x51, 0xd4, 0x80,
	0x9c, 0x22, 0x25, 0x00, 0x17, 0x82, 0x2a, 0x52, 0x62, 0x00, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfb,
	0xcd, 0xcb, 0x00, 0xe9, 0x00, 0x00, 0x00,
}
